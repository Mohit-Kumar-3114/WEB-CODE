
Question- What is next.js?
Answer- NextJS was a framework that was introduced because of some minor inconviniences in React. In a React project,
1. You have to maintain a separate Backend project for your API routes.
2. React does not provide out of the box routing (you have to use react-router-dom).
3. React is not SEO Optimised.
4. Waterfalling problem.




Question- Why react is not seo optimised?
Answer- When a website is SEO optimized, it means that it's structured and designed in a way that makes it easier for 
search engines like Google, Bing, and others to understand its content and relevance to users' search queries. React 
primarily relies on client-side rendering, where the initial HTML is minimal and content is populated dynamically 
using JavaScript. The crawlers dont't usually run your JS and render your page to see the final output. 




Question- What is Waterfalling problem in react?
Answer- The "waterfalling problem" in React, and more broadly in web development, refers to a scenario where data 
fetching operations are chained or dependent on each other in a way that leads to inefficient loading behavior.




Question- What is cdn?
Answer- A CDN is a distributed network of servers located around the world. Its main purpose is to cache and deliver 
static assets like HTML, CSS, JavaScript, images, etc., to users from the server closest to them. This makes 
websites faster because the content is served from a location near the user. Static content like pre-rendered HTML 
or assets can be cached and stored on a CDN, so the server doesn’t need to regenerate it for every request.




Question- What are offerings and downsides of NextJS?
Answer- Next.js provides you the following upsides over React-
1. Server side rendering - Get’s rid of SEO problems.
2. API routes - Single codebase with frontend and backend.
3. File based routing (no need for react-router-dom).
4. Bundle size optimisations, Static site generation.
 
Downsides - 
1. Can’t be distributed via a CDN, always needs a server running that does server side rendering and hence is 
expensive.
2. Very opinionated, very hard to move out of it.




Question- What is server side rendering vs client side rendering?
Answer- Client-Side Rendering (CSR):
Client-side rendering (CSR) is an approach to web development where the rendering of web pages occurs primarily in 
the user's web browser rather than on the server. In CSR, when user visits a web application, the browser initially 
downloads a minimal HTML file, which usually contains links to external stylesheets and JavaScript files. Instead 
of receiving fully rendered HTML content from the server, the browser then downloads and executes JavaScript files 
responsible for fetching data and dynamically updating the page's content. As user interacts with the application, 
such as clicking on links or buttons, the JavaScript code processes these actions and manipulates the Document 
Object Model (DOM) to reflect changes in the user interface without requiring a full page reload. 

Server-Side Rendering (SSR):
Server-side rendering (SSR) involves generating the HTML content of a web page on the server in response to each 
user request. When a user navigates to a page, the server processes the request, retrieves any necessary data, and 
constructs the complete HTML document, which is then sent to the client's browser for display. This approach ensures 
that users receive fully rendered pages directly from the server, leading to faster initial page loads and improved 
search engine optimization (SEO) since search engine crawlers can easily index the content.




Question- What is static site generation?
Answer- If a page uses Static Generation, the page HTML is generated at build time. That means in production, the 
page HTML is generated when you run next build. This HTML will then be reused on each request. It can be cached by a 
CDN. If you use static site generation, you can defer the expensive operation of rendering a page to the build time 
so it only happens once. 




Question- What are webhooks?
Answer- Webhooks are a way for web applications to communicate with each other in real-time. Instead of continuously 
polling an API for updates, a webhook allows an application to send a request to a specified URL (usually provided 
by another application) when a certain event occurs. Imagine you're waiting for an important email. Instead 
of checking your inbox every minute, you set up a special alert that goes off whenever you receive a new email. 
Webhooks are like those alerts, but for web applications. Instead of constantly asking if something has happened, 
they wait for an event to occur and then notify you instantly.




Question- What is routing?
Answer- Routing is the process of defining how an application responds to different URLs or paths. In simple terms, 
it's like a map that directs users to specific pages or content based on the address they visit in the browser. For 
example, visiting /home might show the homepage, and /about might show the about page.




Question- What are layouts in next.js?
Answer- Layouts in Next.js are a powerful feature that allow you to define shared UI components across multiple 
routes in your application. They provide a way to wrap child pages or nested layouts with common elements, such as 
headers, footers, sidebars, or any other reusable UI components.




Question- Why we use singleton prisma client?
Answer- In a Next.js development environment, the next dev command clears the Node.js cache on each run. This 
behavior can lead to the creation of multiple instances of the Prisma client due to hot reloading, which can quickly 
exhaust the database connections, as each Prisma client instance holds its own connection pool. To avoid this issue, 
it's recommended to create a singleton instance of the Prisma client, ensuring that only one instance is created and 
reused throughout the application's lifecycle.