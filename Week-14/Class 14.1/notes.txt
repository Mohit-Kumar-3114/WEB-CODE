
Question- What is next.js?
Answer- NextJS was a framework that was introduced because of some minor inconviniences in React. In a React project,
1. You have to maintain a separate Backend project for your API routes.
2. React does not provide out of the box routing (you have to use react-router-dom).
3. React is not SEO Optimised.
4. Waterfalling problem.




Question- Why react is not seo optimised?
Answer- Search engines like Google and Bing use web crawlers (also known as bots or spiders) to discover and index 
websites. These crawlers visit websites and analyze the HTML content to understand what the website is about and how 
to rank it in search results. However, traditional client-side rendered (CSR) React applications pose a challenge 
for SEO because the crawlers typically don't execute JavaScript and render the page to see the final output. 
Instead, they rely on the initial HTML response received from the server. With SSR, Next.js pre-renders the initial 
page on the server and sends the fully rendered HTML to the client. This means that search engine crawlers can easily 
index the content without having to execute JavaScript. 




Question- What is Waterfalling problem in react?
Answer- The waterfalling problem is a common issue in traditional client-side rendered (CSR) React applications, 
where data fetching operations are chained or dependent on each other, leading to inefficient loading behavior. Let's 
understand this problem with an example of a blogging website built with React. Suppose you have a blogging website 
built with React, and a user visits the homepage. The request cycle might look something like this:
1. Fetch the index.html from the CDN: The browser first fetches the initial HTML file, which typically contains 
minimal content and a reference to the JavaScript bundle.
2. Fetch the script.js from the CDN: After the initial HTML is loaded, the browser fetches the JavaScript bundle, 
which contains the React application code.
3. Check if the user is logged in: Once the JavaScript bundle is loaded and executed, the application checks if the 
user is logged in. If the user is not logged in, they are redirected to the /login page.
4. Fetch the actual blog posts: If the user is logged in, the application fetches the actual blog post data from an 
API or a database.
In this scenario, there are four round trips that happen sequentially, one after the other. The browser has to wait 
for each step to complete before moving on to the next one, resulting in a "waterfalling" effect. This can lead to 
slow initial load times and a poor user experience, especially on slower network connections.

Next.js provides several features and optimizations to address the waterfalling problem and improve the overall 
performance and loading behavior of your React application. Next.js automatically performs code splitting and lazy 
loading for your application. This means that instead of loading the entire application bundle upfront, Next.js 
splits the code into smaller chunks and loads them on-demand as needed. This reduces the initial JavaScript payload 
and improves the initial load time.




Question- What is cdn?
Answer- A CDN is a distributed network of servers located around the world. Its main purpose is to cache and deliver 
static assets like HTML, CSS, JavaScript, images, etc., to users from the server closest to them. This makes 
websites faster because the content is served from a location near the user. Static content like pre-rendered HTML 
or assets can be cached and stored on a CDN, so the server doesn’t need to regenerate it for every request.




Question- What are offerings and downsides of NextJS?
Answer- Next.js provides you the following upsides over React-
1. Server side rendering - Get’s rid of SEO problems.
2. API routes - Single codebase with frontend and backend.
3. File based routing (no need for react-router-dom).
4. Bundle size optimisations, Static site generation.
 
Downsides - 
1. Can’t be distributed via a CDN, always needs a server running that does server side rendering and hence is 
expensive.
2. Very opinionated, very hard to move out of it.




Question- What is server side rendering vs client side rendering?
Answer- Client-Side Rendering (CSR):
Client-side rendering (CSR) is an approach to web development where the rendering of web pages occurs primarily in 
the user's web browser rather than on the server. In CSR, when user visits a web application, the browser initially 
downloads a minimal HTML file, which usually contains links to external stylesheets and JavaScript files. Instead 
of receiving fully rendered HTML content from the server, the browser then downloads and executes JavaScript files 
responsible for fetching data and dynamically updating the page's content. As user interacts with the application, 
such as clicking on links or buttons, the JavaScript code processes these actions and manipulates the Document 
Object Model (DOM) to reflect changes in the user interface without requiring a full page reload. 

Server-Side Rendering (SSR):
Server-side rendering (SSR) involves generating the HTML content of a web page on the server in response to each 
user request. When a user navigates to a page, the server processes the request, retrieves any necessary data, and 
constructs the complete HTML document, which is then sent to the client's browser for display. This approach ensures 
that users receive fully rendered pages directly from the server, leading to faster initial page loads and improved 
search engine optimization (SEO) since search engine crawlers can easily index the content.




Question- What is static site generation?
Answer- Static Site Generation (SSG) is a technique where web pages are generated at build time, meaning the HTML 
files are pre-built and stored on the server or a CDN. When a user requests a page, it is served instantly without 
needing real-time server processing. This results in faster load times, improved performance, and better SEO since 
search engines can easily index pre-rendered pages.




Question- What is routing?
Answer- Routing is the process of defining how an application responds to different URLs or paths. In simple terms, 
it's like a map that directs users to specific pages or content based on the address they visit in the browser. For 
example, visiting /home might show the homepage, and /about might show the about page.




Question- What are layouts in next.js?
Answer- Layouts in Next.js are a powerful feature that allow you to define shared UI components across multiple 
routes in your application. They provide a way to wrap child pages or nested layouts with common elements, such as 
headers, footers, sidebars, or any other reusable UI components.




Question- Why we use singleton prisma client?
Answer- In a Next.js development environment, the next dev command clears the Node.js cache on each run. This 
behavior can lead to the creation of multiple instances of the Prisma client due to hot reloading, which can quickly 
exhaust the database connections, as each Prisma client instance holds its own connection pool. To avoid this issue, 
it's recommended to create a singleton instance of the Prisma client, ensuring that only one instance is created and 
reused throughout the application's lifecycle.